# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    stripe_api_key: '%env(STRIPE_KEY)%'
    admin_email: '%env(ADMIN_EMAIL)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    Symfony\Component\Security\Csrf\CsrfTokenManagerInterface: '@security.csrf.token_manager'

    App\EventListener\AddPictureFieldListener:
        arguments:
            $cloudinaryService: '@App\Service\Cloudinary\CloudinaryService'

    App\EventListener\SlugAssignerListener:
        arguments:
            $slugger: '@slugger'
        tags:
            - { name: doctrine.event_listener, event: prePersist }

    App\EventListener\EntityUpdateListener:
        tags:
            - { name: doctrine.event_listener, event: onFlush }

    App\EventListener\NavbarListener:
        arguments:
            $twig: '@twig'
            $categoryService: '@App\Service\Category\CategoryService'
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }

    App\EventListener\UserRegistrationListener:
        tags:
            - { name: postPersist, event: prePersist }

    App\EventListener\AuthenticationSuccessListener:
        arguments:
            $cartSessionStorage: '@App\Service\Cart\CartSessionStorage'
            $entityManager: '@doctrine.orm.default_entity_manager'
        tags:
            - { name: kernel.event_listener, event: security.interactive_login }

    App\EventListener\OrderReceivedListener:
        arguments:
            $adminEmail: '%admin_email%'
        tags:
            - { name: doctrine.event_listener, event: postUpdate }

    App\Extension\Twig\TwigQueryReplace:
        tags: [ 'twig.extension' ]

    App\Extension\FormType\InputSanitizerExtension:
        tags: [ 'form.type' ]

    App\Extension\FormType\InputTransformExtension:
        tags: [ 'form.type' ]

    App\Extension\FormType\HtmlSanitizerExtension:
        tags: [ 'form.type' ]
