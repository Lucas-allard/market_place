<?php

namespace App\Tests\Units\Entity;

use App\Entity\Product;
use App\Entity\Seller;
use Doctrine\Common\Collections\ArrayCollection;
use PHPUnit\Framework\TestCase;

class SellerTest extends TestCase
{
    private Seller $seller;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->seller = new Seller();
    }

    /**
     * @group entity
     * @group seller
     * @group seller-default
     */
    public function testSellerDefault(): void
    {
        $this->assertEmpty($this->seller->getCompany());
        $this->assertIsString($this->seller->getCompany());
        $this->assertEmpty($this->seller->getSiret());
        $this->assertIsString($this->seller->getSiret());
        $this->assertEmpty($this->seller->getVat());
        $this->assertIsString($this->seller->getVat());
        $this->assertEquals(0.0, $this->seller->getSellerRating());
        $this->assertIsFloat($this->seller->getSellerRating());
        $this->assertEmpty($this->seller->getProducts());
        $this->assertInstanceOf(ArrayCollection::class, $this->seller->getProducts());
    }

    /**
     * @group entity
     * @group seller
     * @group seller-set-company
     */
    public function testSellerSetCompany(): void
    {
        $this->seller->setCompany('Company');
        $this->assertSame('Company', $this->seller->getCompany());
    }

    /**
     * @group entity
     * @group seller
     * @group seller-set-siret
     */
    public function testSellerSetSiret(): void
    {
        $this->seller->setSiret('Siret');
        $this->assertSame('Siret', $this->seller->getSiret());
    }

    /**
     * @group entity
     * @group seller
     * @group seller-set-vat
     */
    public function testSellerSetVat(): void
    {
        $this->seller->setVat('Vat');
        $this->assertSame('Vat', $this->seller->getVat());
    }

    /**
     * @group entity
     * @group seller
     * @group seller-set-seller-rating
     */
    public function testSellerSetSellerRating(): void
    {
        $this->seller->setSellerRating(1.0);
        $this->assertSame(1.0, $this->seller->getSellerRating());
    }

    /**
     * @group entity
     * @group seller
     * @group seller-add-product
     */
    public function testSellerAddProduct(): void
    {
        $product = new Product();

        $this->seller->addProduct($product);
        $this->assertContains($product, $this->seller->getProducts());
        $this->assertInstanceOf(ArrayCollection::class, $this->seller->getProducts());
        $this->assertContainsOnlyInstancesOf(Product::class, $this->seller->getProducts());
    }

    /**
     * @group entity
     * @group seller
     * @group seller-add-products-twice
     */
    public function testCannotAddSameProductTwice(): void
    {
        $product = new Product();
        $this->seller->addProduct($product);
        $this->seller->addProduct($product);
        $this->assertCount(1, $this->seller->getProducts());
    }

    /**
     * @group entity
     * @group seller
     * @group seller-remove-product
     */
    public function testSellerRemoveProduct(): void
    {
        $product = new Product();
        $this->seller->addProduct($product);
        $this->seller->removeProduct($product);
        $this->assertNotContains($product, $this->seller->getProducts());
    }

}