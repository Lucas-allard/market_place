<?php

namespace App\Tests\Entity;

use App\Entity\Customer;
use DateTime;
use DateTimeInterface;
use PHPUnit\Framework\TestCase;

class CustomerTest extends TestCase
{
    private Customer $customer;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->customer = new Customer();
    }

    /**
     * @group entity
     * @group customer
     * @group customer-default
     */
    public function testDefault()
    {
        $this->assertEmpty($this->customer->getShippingAddress());
        $this->assertIsString($this->customer->getShippingAddress());
        $this->assertNull($this->customer->getBirthDate());
        $this->assertEmpty($this->customer->getOrders());
        $this->assertIsArray($this->customer->getOrders());
    }

    /**
     * @group entity
     * @group customer
     * @group customer-set-shipping-address
     */
    public function testSetShippingAddress()
    {
        $this->customer->setShippingAddress("123 Main St");
        $this->assertSame("123 Main St", $this->customer->getShippingAddress());
    }

    /**
     * @group entity
     * @group customer
     * @group customer-set-birth-date
     */
    public function testSetBirthDate()
    {
        $this->customer->setBirthDate(new DateTime());
        $this->assertInstanceOf(DateTimeInterface::class, $this->customer->getBirthDate());
    }

    /**
     * @group entity
     * @group customer
     * @group customer-set-orders
     */
    public function testSetOrders()
    {
        $this->customer->setOrders([
            'produit 1' => 1,
            'produit 2' => 2,
            'produit 3' => 3,
        ]);
        $this->assertIsArray($this->customer->getOrders());
        $this->assertSame([1, 2, 3], $this->customer->getOrders());
    }

    /**
     * @group entity
     * @group customer
     * @group customer-add-order
     */
    public function testAddOrder()
    {
        $this->customer->addOrder([
            "produit 1" => 1,
        ]);
        $this->assertIsArray($this->customer->getOrders());
        $this->assertSame([
            "produit 1" => 1,
        ], $this->customer->getOrders()[0]);
    }

    /**
     * @group entity
     * @group customer
     * @group customer-add-order-twice
     */
    public function testCannotAddSameOrderTwice()
    {
        $this->customer->addOrder([
            "produit 1" => 1,
        ]);
        $this->customer->addOrder([
            "produit 1" => 1,
        ]);
        $this->assertIsArray($this->customer->getOrders());
        $this->assertCount(1, $this->customer->getOrders());
    }
}